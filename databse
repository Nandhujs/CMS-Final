-- ========================================
-- 1. Roles Table
-- ========================================
CREATE TABLE Roles (
    RoleId INT IDENTITY(1,1) PRIMARY KEY,
    RoleName VARCHAR(50) NOT NULL UNIQUE
);
GO

-- ========================================
-- 2. Staff Table
-- ========================================
CREATE TABLE Staff (
    StaffId INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100) NOT NULL,
    Email VARCHAR(100) UNIQUE NOT NULL,
    DOB DATE NOT NULL,
    DOJ DATE NOT NULL,
    Address VARCHAR(100),
    Gender VARCHAR(10),
    Phone VARCHAR(15),
    RoleId INT NOT NULL,
    Username VARCHAR(50) UNIQUE NOT NULL,
    Password VARCHAR(255) NOT NULL,
    Status VARCHAR(20) DEFAULT 'Active',
    CONSTRAINT FK_Staff_Role FOREIGN KEY (RoleId) REFERENCES Roles(RoleId)
);
GO

-- ========================================
-- 3. Department Table
-- ========================================
CREATE TABLE Department(
    DeptId INT IDENTITY(1,1) PRIMARY KEY,
    DeptName VARCHAR(100) NOT NULL UNIQUE
);
GO

-- ========================================
-- 4. Specialization Table
-- ========================================
CREATE TABLE Specialization (
    SpecializationId INT IDENTITY(1,1) PRIMARY KEY,
    Name VARCHAR(100) NOT NULL UNIQUE
);
GO

-- ========================================
-- 5. Doctor Table
-- ========================================
CREATE TABLE Doctor (
    DoctorId INT IDENTITY(1,1) PRIMARY KEY,
    StaffId INT NOT NULL UNIQUE,
    Qualification VARCHAR(100),
    Specialization VARCHAR(100),
    DeptId INT,
    SpecializationId INT NULL,
    CONSTRAINT FK_Doctor_Staff FOREIGN KEY (StaffId) REFERENCES Staff(StaffId),
    CONSTRAINT FK_Doctor_Dept FOREIGN KEY (DeptId) REFERENCES Department(DeptId),
    CONSTRAINT FK_Doctor_Specialization FOREIGN KEY (SpecializationId) REFERENCES Specialization(SpecializationId)
);
GO

-- ========================================
-- 6. Patient Table
-- ========================================
CREATE TABLE Patient (
    PatientId INT IDENTITY(1,1) PRIMARY KEY,
    MMRNo VARCHAR(20) UNIQUE NOT NULL,
    Name VARCHAR(100) NOT NULL,
    Address VARCHAR(100),
    Gender VARCHAR(10),
    DOB DATE,
    BloodGroup VARCHAR(5),
    Phone VARCHAR(15),
    Status VARCHAR(20) DEFAULT 'Active'
);
GO

-- ========================================
-- 7. Appointment Table
-- ========================================
CREATE TABLE Appointment (
    AppointmentId INT IDENTITY(1,1) PRIMARY KEY,
    PatientId INT NOT NULL,
    DoctorId INT NOT NULL,
    TokenNumber INT,
    AppointmentDate DATETIME NOT NULL,
    Status VARCHAR(20) DEFAULT 'Scheduled',
    CONSTRAINT FK_Appointment_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),
    CONSTRAINT FK_Appointment_Doctor FOREIGN KEY (DoctorId) REFERENCES Doctor(DoctorId)
);
GO

-- ========================================
-- 8. DoctorSlot Table
-- ========================================
CREATE TABLE DoctorSlot (
    SlotId INT IDENTITY(1,1) PRIMARY KEY,
    DoctorId INT NOT NULL,
    SlotDate DATE NOT NULL,
    StartTime TIME NOT NULL,
    EndTime TIME NOT NULL,
    IsBooked BIT DEFAULT 0,
    PatientId INT NULL,
    CONSTRAINT FK_DoctorSlot_Doctor FOREIGN KEY (DoctorId) REFERENCES Doctor(DoctorId),
    CONSTRAINT FK_DoctorSlot_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),
    CONSTRAINT UQ_DoctorSlot UNIQUE (DoctorId, SlotDate, StartTime, EndTime)
);
GO

-- ========================================
-- 9. DiagnosisDetails Table
-- ========================================
CREATE TABLE DiagnosisDetails (
    DiagnosisId INT IDENTITY(1,1) PRIMARY KEY,
    AppointmentId INT NOT NULL,
    PatientId INT NOT NULL,
    DoctorId INT NOT NULL,
    Symptoms VARCHAR(500),
    Diagnosis VARCHAR(500),
    DoctorNotes VARCHAR(500),
    Date DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_DiagnosisDetails_Appointment FOREIGN KEY (AppointmentId) REFERENCES Appointment(AppointmentId),
    CONSTRAINT FK_DiagnosisDetails_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),
    CONSTRAINT FK_DiagnosisDetails_Doctor FOREIGN KEY (DoctorId) REFERENCES Doctor(DoctorId)
);
GO

-- ========================================
-- 10. Medicine Table
-- ========================================
CREATE TABLE Medicine (
    MedicineId INT IDENTITY(1,1) PRIMARY KEY,
    MedicineName VARCHAR(100) NOT NULL,
    MedicineDescription VARCHAR(500) NOT NULL,
    Quantity INT CHECK (Quantity >= 0),
    Price DECIMAL(10,2)
);
GO

-- ========================================
-- 11. MedPrescription Table
-- ========================================
CREATE TABLE MedPrescription (
    PrescriptionId INT IDENTITY(1,1) PRIMARY KEY,
    AppointmentId INT NOT NULL,
    PatientId INT NOT NULL,
    DoctorId INT NOT NULL,
    MedicineId INT NOT NULL,
    Quantity INT NOT NULL CHECK (Quantity > 0),
    Frequency VARCHAR(20) NOT NULL,
    DurationDays INT NOT NULL CHECK (DurationDays >= 0),
    PrescribedDate DATETIME NOT NULL DEFAULT GETDATE(),
    Status VARCHAR(20) NOT NULL DEFAULT 'Pending',
    CONSTRAINT FK_MedPrescription_Appointment FOREIGN KEY (AppointmentId) REFERENCES Appointment(AppointmentId),
    CONSTRAINT FK_MedPrescription_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),
    CONSTRAINT FK_MedPrescription_Doctor FOREIGN KEY (DoctorId) REFERENCES Doctor(DoctorId),
    CONSTRAINT FK_MedPrescription_Medicine FOREIGN KEY (MedicineId) REFERENCES Medicine(MedicineId)
);
GO

-- ========================================
-- 12. LabTest Table
-- ========================================
CREATE TABLE LabTest (
    TestId INT IDENTITY(1,1) PRIMARY KEY,
    TestName VARCHAR(100) NOT NULL,
    Price DECIMAL(10,2) CHECK (Price > 0),
    SampleType NVARCHAR(50),
    NormalRange NVARCHAR(100)
);
GO

-- ========================================
-- 13. LabTestPrescription Table
-- ========================================
CREATE TABLE LabTestPrescription (
    PrescriptionId INT IDENTITY(1,1) PRIMARY KEY,
    AppointmentId INT NOT NULL,
    PatientId INT NOT NULL,
    DoctorId INT NOT NULL,
    TestId INT NULL,
    TestName VARCHAR(200) NOT NULL,
    Quantity INT NOT NULL CHECK (Quantity > 0),
    PrescribedDate DATETIME NOT NULL DEFAULT GETDATE(),
    Status VARCHAR(20) NOT NULL DEFAULT 'Pending',
    CONSTRAINT FK_LabTestPrescription_Appointment FOREIGN KEY (AppointmentId) REFERENCES Appointment(AppointmentId),
    CONSTRAINT FK_LabTestPrescription_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),
    CONSTRAINT FK_LabTestPrescription_Doctor FOREIGN KEY (DoctorId) REFERENCES Doctor(DoctorId),
    CONSTRAINT FK_LabTestPrescription_LabTest FOREIGN KEY (TestId) REFERENCES LabTest(TestId)
);
GO

-- ========================================
-- 14. LabResult Table
-- ========================================
CREATE TABLE LabResult (
    ResultId INT IDENTITY(1,1) PRIMARY KEY,
    TestId INT NOT NULL,
    PatientId INT NOT NULL,
    LowRange DECIMAL(10,2),
    HighRange DECIMAL(10,2),
    ActualValue DECIMAL(10,2),
    Remarks VARCHAR(255),
    DoctorReview VARCHAR(255),
    Date DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_LabResult_Test FOREIGN KEY (TestId) REFERENCES LabTest(TestId),
    CONSTRAINT FK_LabResult_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId)
);
GO

-- ========================================
-- 15. Bill Table
-- ========================================
CREATE TABLE Bill (
    BillId INT IDENTITY(1,1) PRIMARY KEY,
    PatientId INT NOT NULL,
    AppointmentId INT NULL,
    BillType VARCHAR(50) NOT NULL,
    TotalAmount DECIMAL(10,2) DEFAULT 0,
    BillDate DATETIME DEFAULT GETDATE(),
    Paid BIT DEFAULT 0,
    CONSTRAINT FK_Bill_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),
    CONSTRAINT FK_Bill_Appointment FOREIGN KEY (AppointmentId) REFERENCES Appointment(AppointmentId)
);
GO

-- ========================================
-- 16. BillDetails Table
-- ========================================
CREATE TABLE BillDetails (
    BillDetailId INT IDENTITY(1,1) PRIMARY KEY,
    BillId INT NOT NULL,
    ItemType VARCHAR(50) NOT NULL,
    ItemId INT NOT NULL,
    Quantity INT DEFAULT 1,
    UnitPrice DECIMAL(10,2) NOT NULL,
    Amount AS (Quantity * UnitPrice) PERSISTED,
    CONSTRAINT FK_BillDetails_Bill FOREIGN KEY (BillId) REFERENCES Bill(BillId)
);
GO

-- ========================================
-- 17. IssuedMedicine Table
-- ========================================
CREATE TABLE IssuedMedicine (
    IssuedId INT IDENTITY(1,1) PRIMARY KEY,
    AppointmentId INT,
    PatientId INT,
    DoctorId INT,
    MedicineId INT,
    QuantityIssued INT,
    Dosage VARCHAR(100),
    IssueDate DATETIME DEFAULT GETDATE(),
    CONSTRAINT FK_IssuedMedicine_Appointment FOREIGN KEY (AppointmentId) REFERENCES Appointment(AppointmentId),
    CONSTRAINT FK_IssuedMedicine_Patient FOREIGN KEY (PatientId) REFERENCES Patient(PatientId),
    CONSTRAINT FK_IssuedMedicine_Doctor FOREIGN KEY (DoctorId) REFERENCES Doctor(DoctorId),
    CONSTRAINT FK_IssuedMedicine_Medicine FOREIGN KEY (MedicineId) REFERENCES Medicine(MedicineId)
);
GO

-- ========================================
-- INSERT MASTER DATA
-- ========================================

-- Insert Roles
-- Insert Roles
INSERT INTO Roles (RoleName) VALUES 
('Admin'),
('Doctor'),
('Receptionist'),
('Pharmacist'),
('Lab Technician');
GO

-- Insert Departments
INSERT INTO Department (DeptName)
VALUES 
('Cardiology'), 
('Neurology'), 
('Orthopedics'), 
('ENT'), 
('Urology'), 
('Gastroenterology');
GO

-- Insert Specializations
INSERT INTO Specialization (Name) 
VALUES 
('Cardiology'), 
('Neurology'), 
('Orthopedics'), 
('ENT'), 
('Urology'), 
('Gastroenterology');
GO

-- Insert Staff
INSERT INTO Staff (Name, Email, DOB, DOJ, Address, Gender, Phone, RoleId, Username, Password)
VALUES 
('System Admin', 'admin@hospital.com', '1989-12-12', '2025-02-01', 'Admin Block, Kochi', 'Male', '9000000001', 1, 'admin', 'admin@123'),
('Dr. Neha Pillai', 'neha.pillai@hospital.com', '1985-07-22', '2025-02-10', 'Doctor Quarters A1', 'Female', '9000000002', 2, 'drneha', 'neha123'),
('Dr. Suresh Kumar', 'suresh.kumar@hospital.com', '1983-11-09', '2025-02-12', 'Doctor Quarters A2', 'Male', '9000000003', 2, 'drsuresh', 'suresh123'),
('Lakshmi Raj', 'lakshmi@hospital.com', '1994-04-05', '2025-02-20', 'Reception Block, Kochi', 'Female', '9000000004', 3, 'recept1', 'recept@123'),
('Manu George', 'manu@hospital.com', '1992-09-17', '2025-02-21', 'Pharmacy Dept, Kochi', 'Male', '9000000005', 4, 'pharma1', 'pharma@123'),
('Rahul Varma', 'rahul@hospital.com', '1991-02-28', '2025-02-18', 'Lab Dept, Kochi', 'Male', '9000000006', 5, 'lab1', 'lab@123');
GO

-- Insert Doctors
INSERT INTO Doctor (StaffId, Qualification, Specialization, DeptId, SpecializationId)
VALUES 
(2, 'MBBS, MD (Cardiology)', 'Cardiology', 1, 1),
(3, 'MBBS, MS (Orthopedics)', 'Orthopedics', 3, 3);
GO

-- Insert Patients
INSERT INTO Patient (MMRNo, Name, Address, Gender, DOB, BloodGroup, Phone, Status)
VALUES 
('MMR101', 'Kiran Nair', '23 MG Road, Ernakulam, Kerala', 'Male', '1990-05-11', 'A+', '9011111111', 'Active'),
('MMR102', 'Sneha Thomas', '54 Hill View, Kochi, Kerala', 'Female', '1993-08-23', 'B+', '9011111112', 'Active'),
('MMR103', 'Vivek Reddy', '32 Sea Side, Kochi, Kerala', 'Male', '1987-10-19', 'O+', '9011111113', 'Active'),
('MMR104', 'Riya Joseph', '45 Sunset Road, Kochi, Kerala', 'Female', '1999-01-07', 'AB+', '9011111114', 'Active');
GO

-- Insert Medicines
INSERT INTO Medicine (MedicineName, MedicineDescription, Quantity, Price)
VALUES 
('Paracure 650', 'Paracetamol for fever and mild pain', 250, 2.00),
('AmoxyPlus 500', 'Amoxicillin antibiotic capsule', 350, 3.50),
('ZithroTab 250', 'Azithromycin 250mg antibiotic', 180, 4.25),
('PainGo 400', 'Ibuprofen tablet for pain relief', 420, 2.75);
GO

-- Insert Lab Tests
INSERT INTO LabTest (TestName, Price, SampleType, NormalRange)
VALUES 
('Thyroid Function Test', 450, 'Blood', '0.4-4.5'),
('Urine Routine Test', 180, 'Urine', '10-50'),
('Liver Function Test', 700, 'Blood', '10-40'),
('Blood Glucose (Fasting)', 160, 'Blood', '70-110');
GO


-- Insert Appointments
INSERT INTO Appointment (PatientId, DoctorId, TokenNumber, AppointmentDate, Status)
VALUES 
(1, 1, 1, '2025-10-27 10:00', 'Scheduled'),
(2, 1, 2, '2025-10-27 10:30', 'Scheduled'),
(3, 1, 3, '2025-10-27 11:00', 'Scheduled'),
(4, 1, 4, '2025-10-27 11:30', 'Scheduled');
GO

-- ========================================
-- STORED PROCEDURES
-- ========================================

-- Add new staff
CREATE OR ALTER PROCEDURE sp_AddStaff
    @Name VARCHAR(100),
    @Email VARCHAR(100),
    @DOB DATE,
    @DOJ DATE,
    @Address VARCHAR(100),
    @Gender VARCHAR(10),
    @Phone VARCHAR(15),
    @RoleId INT,
    @Username VARCHAR(50),
    @Password VARCHAR(255)
AS
BEGIN
    INSERT INTO Staff (Name, Email, DOB, DOJ, Address, Gender, Phone, RoleId, Username, Password)
    VALUES (@Name, @Email, @DOB, @DOJ, @Address, @Gender, @Phone, @RoleId, @Username, @Password);
    
    SELECT CAST(SCOPE_IDENTITY() AS INT) AS NewStaffId;
END;
GO

-- Get all staff
CREATE OR ALTER PROCEDURE sp_GetAllStaff
AS
BEGIN
    SELECT s.*, r.RoleName 
    FROM Staff s
    INNER JOIN Roles r ON s.RoleId = r.RoleId;
END;
GO

-- Update staff status
CREATE OR ALTER PROCEDURE sp_UpdateStaffStatus
    @StaffId INT,
    @Status VARCHAR(20)
AS
BEGIN
    UPDATE Staff
    SET Status = @Status
    WHERE StaffId = @StaffId;
END;
GO

-- Add a new patient
CREATE OR ALTER PROCEDURE sp_AddPatient
    @MMRNo VARCHAR(20),
    @Name NVARCHAR(100),
    @Gender NVARCHAR(10),
    @DOB DATE,
    @Phone NVARCHAR(15),
    @Address NVARCHAR(255),
    @BloodGroup VARCHAR(5) = NULL,
    @Status VARCHAR(20) = 'Active'
AS
BEGIN
    INSERT INTO Patient (MMRNo, Name, Gender, DOB, Phone, Address, BloodGroup, Status)
    VALUES (@MMRNo, @Name, @Gender, @DOB, @Phone, @Address, @BloodGroup, @Status);
END;
GO

-- Update patient
CREATE OR ALTER PROCEDURE sp_UpdatePatient
    @PatientId INT,
    @Name NVARCHAR(100),
    @Gender NVARCHAR(10),
    @DOB DATE,
    @Phone NVARCHAR(15),
    @Address NVARCHAR(255),
    @BloodGroup NVARCHAR(10),
    @Status NVARCHAR(50)
AS
BEGIN
    UPDATE Patient
    SET 
        Name = @Name,
        Gender = @Gender,
        DOB = @DOB,
        Phone = @Phone,
        Address = @Address,
        BloodGroup = @BloodGroup,
        Status = @Status
    WHERE PatientId = @PatientId;
END;
GO

-- Delete patient
CREATE OR ALTER PROCEDURE sp_DeletePatient
    @PatientId INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        BEGIN TRANSACTION;

        DELETE FROM DiagnosisDetails WHERE PatientId = @PatientId;
        DELETE FROM LabResult WHERE PatientId = @PatientId;
        DELETE FROM IssuedMedicine WHERE PatientId = @PatientId;
        DELETE FROM MedPrescription WHERE PatientId = @PatientId;
        DELETE FROM LabTestPrescription WHERE PatientId = @PatientId;
        
        DELETE bd FROM BillDetails bd
        INNER JOIN Bill b ON bd.BillId = b.BillId
        WHERE b.PatientId = @PatientId;
        
        DELETE FROM Bill WHERE PatientId = @PatientId;
        
        UPDATE DoctorSlot
        SET PatientId = NULL, IsBooked = 0
        WHERE PatientId = @PatientId;
        
        DELETE FROM Appointment WHERE PatientId = @PatientId;
        DELETE FROM Patient WHERE PatientId = @PatientId;

        COMMIT TRANSACTION;
    END TRY
    BEGIN CATCH
        IF XACT_STATE() <> 0
            ROLLBACK TRANSACTION;
        DECLARE @ErrorMessage NVARCHAR(4000) = ERROR_MESSAGE();
        RAISERROR('Error deleting patient: %s', 16, 1, @ErrorMessage);
    END CATCH
END;
GO

-- Get patient by ID
CREATE OR ALTER PROCEDURE sp_GetPatientById
    @PatientId INT
AS
BEGIN
    SELECT PatientId, MMRNo, Name, Gender, DOB, Phone, Address, BloodGroup, Status
    FROM Patient
    WHERE PatientId = @PatientId;
END;
GO

-- Search patient by MMR
CREATE OR ALTER PROCEDURE sp_SearchPatientByMMRNo
    @MMRNo VARCHAR(20)
AS
BEGIN
    SELECT PatientId, MMRNo, Name, Gender, DOB, Phone, Address, BloodGroup, Status
    FROM Patient
    WHERE MMRNo = @MMRNo;
END;
GO

-- Search patient by phone
CREATE OR ALTER PROCEDURE sp_SearchPatientByPhone
    @Phone VARCHAR(15)
AS
BEGIN
    SELECT PatientId, MMRNo, Name, Gender, DOB, Phone, Address, BloodGroup, Status
    FROM Patient
    WHERE Phone = @Phone;
END;
GO

-- Book appointment
CREATE OR ALTER PROCEDURE sp_BookAppointment
    @PatientId INT,
    @DoctorId INT,
    @AppointmentDate DATETIME,
    @Status NVARCHAR(50) = 'Scheduled'
AS
BEGIN
    SET NOCOUNT ON;

    IF EXISTS (
        SELECT 1
        FROM Appointment
        WHERE DoctorId = @DoctorId
          AND ABS(DATEDIFF(MINUTE, AppointmentDate, @AppointmentDate)) < 15
    )
    BEGIN
        RAISERROR('This doctor already has an appointment within 15 minutes of the selected time.', 16, 1);
        RETURN;
    END

    DECLARE @TokenNumber INT;
    SELECT @TokenNumber = ISNULL(MAX(TokenNumber), 0) + 1
    FROM Appointment
    WHERE DoctorId = @DoctorId
      AND CAST(AppointmentDate AS DATE) = CAST(@AppointmentDate AS DATE);

    INSERT INTO Appointment (PatientId, DoctorId, AppointmentDate, TokenNumber, Status)
    VALUES (@PatientId, @DoctorId, @AppointmentDate, @TokenNumber, @Status);
    
    SELECT @TokenNumber AS TokenNumber;
END;
GO

-- Get today's appointments for doctor
CREATE OR ALTER PROCEDURE sp_Doctor_GetTodaysAppointments
    @DoctorId INT,
    @ForDate DATE
AS
BEGIN
    SET NOCOUNT ON;
    SELECT 
        a.AppointmentId,
        a.TokenNumber,
        a.AppointmentDate,
        a.Status,
        p.MMRNo,
        p.Name AS PatientName,
        p.Gender,
        CASE 
            WHEN p.DOB IS NULL THEN NULL
            ELSE DATEDIFF(YEAR, p.DOB, @ForDate) - 
                 CASE WHEN DATEADD(YEAR, DATEDIFF(YEAR, p.DOB, @ForDate), p.DOB) > @ForDate THEN 1 ELSE 0 END
        END AS Age
    FROM Appointment a
    INNER JOIN Patient p ON p.PatientId = a.PatientId
    WHERE a.DoctorId = @DoctorId
      AND CAST(a.AppointmentDate AS DATE) = @ForDate
    ORDER BY 
        CASE WHEN a.TokenNumber IS NULL THEN 1 ELSE 0 END,
        a.TokenNumber;
END;
GO

-- Get patient by MMR (Doctor view)
CREATE OR ALTER PROCEDURE sp_Doctor_GetPatientByMMR
    @MMRNo VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    
    SELECT 
        p.PatientId, p.MMRNo, p.Name, p.Address, p.Gender, p.DOB,
        CASE 
            WHEN p.DOB IS NULL THEN NULL
            ELSE DATEDIFF(YEAR, p.DOB, GETDATE()) - 
                 CASE WHEN DATEADD(YEAR, DATEDIFF(YEAR, p.DOB, GETDATE()), p.DOB) > GETDATE() THEN 1 ELSE 0 END
        END AS Age,
        p.BloodGroup, p.Phone, p.Status
    FROM Patient p
    WHERE p.MMRNo = @MMRNo;

    SELECT TOP (10)
        dd.DiagnosisId, dd.AppointmentId, dd.Date, dd.Symptoms, dd.Diagnosis,
        ISNULL((
            SELECT STRING_AGG(m.MedicineName, ', ') 
            FROM MedPrescription mp
            LEFT JOIN Medicine m ON m.MedicineId = mp.MedicineId
            WHERE mp.AppointmentId = dd.AppointmentId
        ), '') AS PrescribedMedicine,
        ISNULL((
            SELECT STRING_AGG(ltp.TestName, ', ')
            FROM LabTestPrescription ltp
            WHERE ltp.AppointmentId = dd.AppointmentId
        ), '') AS PrescribedLab,
        dd.DoctorNotes, a.AppointmentDate,
        d.DoctorId AS WhoDoctorId, s.Name AS WhoDoctorName
    FROM DiagnosisDetails dd
    INNER JOIN Appointment a ON a.AppointmentId = dd.AppointmentId
    INNER JOIN Doctor d ON d.DoctorId = dd.DoctorId
    LEFT JOIN Staff s ON s.StaffId = d.StaffId
    INNER JOIN Patient p ON p.PatientId = dd.PatientId
    WHERE p.MMRNo = @MMRNo
    ORDER BY dd.Date DESC;

    SELECT TOP (10)
        lr.ResultId, lt.TestName, lr.LowRange, lr.HighRange, 
        lr.ActualValue, lr.Remarks, lr.DoctorReview, lr.Date
    FROM LabResult lr
    INNER JOIN LabTest lt ON lt.TestId = lr.TestId
    INNER JOIN Patient p ON p.PatientId = lr.PatientId
    WHERE p.MMRNo = @MMRNo
    ORDER BY lr.Date DESC;
END;
GO

-- Get consultation by appointment
CREATE OR ALTER PROCEDURE sp_Doctor_GetConsultationByAppointment
    @AppointmentId INT
AS
BEGIN
    SET NOCOUNT ON;

    SELECT 
        a.AppointmentId, a.PatientId, a.DoctorId, a.TokenNumber, a.AppointmentDate, a.Status,
        p.MMRNo, p.Name AS PatientName, p.Gender, p.DOB,
        CASE 
            WHEN p.DOB IS NULL THEN NULL
            ELSE DATEDIFF(YEAR, p.DOB, CAST(a.AppointmentDate AS DATE)) - 
                 CASE WHEN DATEADD(YEAR, DATEDIFF(YEAR, p.DOB, CAST(a.AppointmentDate AS DATE)), p.DOB) > CAST(a.AppointmentDate AS DATE) THEN 1 ELSE 0 END
        END AS Age
    FROM Appointment a
    INNER JOIN Patient p ON p.PatientId = a.PatientId
    WHERE a.AppointmentId = @AppointmentId;

    SELECT 
        dd.DiagnosisId, dd.Symptoms, dd.Diagnosis,
        ISNULL((
            SELECT STRING_AGG(m.MedicineName, ', ')
            FROM MedPrescription mp
            LEFT JOIN Medicine m ON m.MedicineId = mp.MedicineId
            WHERE mp.AppointmentId = dd.AppointmentId
        ), '') AS PrescribedMedicine,
        ISNULL((
            SELECT STRING_AGG(ltp.TestName, ', ')
            FROM LabTestPrescription ltp
            WHERE ltp.AppointmentId = dd.AppointmentId
        ), '') AS PrescribedLab,
        dd.DoctorNotes, dd.Date
    FROM DiagnosisDetails dd
    WHERE dd.AppointmentId = @AppointmentId;
END;
GO

-- Save consultation
CREATE OR ALTER PROCEDURE sp_Doctor_SaveConsultation
    @AppointmentId INT,
    @PatientId INT,
    @DoctorId INT,
    @Symptoms VARCHAR(500),
    @Diagnosis VARCHAR(500),
    @PrescribedMedicine VARCHAR(1000) = NULL,
    @PrescribedLab VARCHAR(1000) = NULL,
    @DoctorNotes VARCHAR(500),
    @OutStatus INT OUTPUT
AS
BEGIN
    SET NOCOUNT ON;

    IF NOT EXISTS (SELECT 1 FROM Appointment WHERE AppointmentId = @AppointmentId AND PatientId = @PatientId)
    BEGIN
        SET @OutStatus = 1;
        RETURN;
    END

    BEGIN TRY
        INSERT INTO DiagnosisDetails (AppointmentId, PatientId, DoctorId, Symptoms, Diagnosis, DoctorNotes)
        VALUES (@AppointmentId, @PatientId, @DoctorId, @Symptoms, @Diagnosis, @DoctorNotes);

        UPDATE Appointment
        SET Status = 'Completed'
        WHERE AppointmentId = @AppointmentId;

        SET @OutStatus = 0;
    END TRY
    BEGIN CATCH
        SET @OutStatus = 2;
    END CATCH
END;
GO

-- Update appointment status
CREATE OR ALTER PROCEDURE sp_Doctor_UpdateAppointmentStatus
    @AppointmentId INT,
    @NewStatus VARCHAR(20)
AS
BEGIN
    SET NOCOUNT ON;
    UPDATE Appointment
    SET Status = @NewStatus
    WHERE AppointmentId = @AppointmentId;
END;
GO

-- Get lab results for patient
CREATE OR ALTER PROCEDURE sp_Doctor_GetLabResultsForPatient
    @PatientId INT,
    @FromDate DATETIME = NULL,
    @ToDate DATETIME = NULL
AS
BEGIN
    SET NOCOUNT ON;
    SELECT
        lr.ResultId, lr.TestId, lt.TestName, lr.LowRange, lr.HighRange,
        lr.ActualValue, lr.Remarks, lr.DoctorReview, lr.Date
    FROM LabResult lr
    INNER JOIN LabTest lt ON lt.TestId = lr.TestId
    WHERE lr.PatientId = @PatientId
      AND (@FromDate IS NULL OR lr.Date >= @FromDate)
      AND (@ToDate IS NULL OR lr.Date <= @ToDate)
    ORDER BY lr.Date DESC;
END;
GO

-- Get lab tests for technician
CREATE OR ALTER PROCEDURE sp_GetLabTestsForTechnician
    @PatientId INT
AS
BEGIN
    SELECT lr.*, lt.TestName, p.Name AS PatientName 
    FROM LabResult lr
    INNER JOIN LabTest lt ON lr.TestId = lt.TestId
    INNER JOIN Patient p ON lr.PatientId = p.PatientId
    WHERE lr.PatientId = @PatientId;
END;
GO

-- Add or update lab result
CREATE OR ALTER PROCEDURE sp_AddUpdateLabResult
    @TestId INT,
    @PatientId INT,
    @LowRange DECIMAL(10,2),
    @HighRange DECIMAL(10,2),
    @ActualValue DECIMAL(10,2),
    @Remarks VARCHAR(255),
    @DoctorReview VARCHAR(255)
AS
BEGIN
    IF EXISTS (SELECT 1 FROM LabResult WHERE TestId = @TestId AND PatientId = @PatientId)
    BEGIN
        UPDATE LabResult
        SET LowRange = @LowRange,
            HighRange = @HighRange,
            ActualValue = @ActualValue,
            Remarks = @Remarks,
            DoctorReview = @DoctorReview,
            Date = GETDATE()
        WHERE TestId = @TestId AND PatientId = @PatientId;
    END
    ELSE
    BEGIN
        INSERT INTO LabResult (TestId, PatientId, LowRange, HighRange, ActualValue, Remarks, DoctorReview)
        VALUES (@TestId, @PatientId, @LowRange, @HighRange, @ActualValue, @Remarks, @DoctorReview);
    END
END;
GO

-- Add new medicine
CREATE OR ALTER PROCEDURE sp_AddMedicine
    @MedicineName VARCHAR(100),
    @MedicineDescription VARCHAR(500),
    @Quantity INT,
    @Price DECIMAL(10,2)
AS
BEGIN
    INSERT INTO Medicine (MedicineName, MedicineDescription, Quantity, Price)
    VALUES (@MedicineName, @MedicineDescription, @Quantity, @Price);
END;
GO

-- Deliver medicine
CREATE OR ALTER PROCEDURE sp_DeliverMedicine
    @AppointmentId INT,
    @PatientId INT,
    @DoctorId INT,
    @MedicineId INT,
    @QuantityIssued INT,
    @Dosage VARCHAR(100)
AS
BEGIN
    DECLARE @AvailableQty INT;
    SELECT @AvailableQty = Quantity FROM Medicine WHERE MedicineId = @MedicineId;

    IF @AvailableQty IS NULL
    BEGIN
        RAISERROR('Medicine not found.', 16, 1);
        RETURN;
    END

    IF @AvailableQty < @QuantityIssued
    BEGIN
        RAISERROR('Not enough stock available.', 16, 1);
        RETURN;
    END

    UPDATE Medicine
    SET Quantity = Quantity - @QuantityIssued
    WHERE MedicineId = @MedicineId;

    INSERT INTO IssuedMedicine (AppointmentId, PatientId, DoctorId, MedicineId, QuantityIssued, Dosage)
    VALUES (@AppointmentId, @PatientId, @DoctorId, @MedicineId, @QuantityIssued, @Dosage);

    DECLARE @BillId INT;
    SELECT @BillId = BillId 
    FROM Bill 
    WHERE PatientId = @PatientId AND AppointmentId = @AppointmentId AND BillType = 'Medicine';

    IF @BillId IS NULL
    BEGIN
        INSERT INTO Bill (PatientId, AppointmentId, BillType, TotalAmount)
        VALUES (@PatientId, @AppointmentId, 'Medicine', 0);
        SET @BillId = SCOPE_IDENTITY();
    END

    DECLARE @UnitPrice DECIMAL(10,2);
    SELECT @UnitPrice = Price FROM Medicine WHERE MedicineId = @MedicineId;

    INSERT INTO BillDetails (BillId, ItemType, ItemId, Quantity, UnitPrice)
    VALUES (@BillId, 'Medicine', @MedicineId, @QuantityIssued, @UnitPrice);

    UPDATE Bill
    SET TotalAmount = TotalAmount + (@QuantityIssued * @UnitPrice)
    WHERE BillId = @BillId;
END;
GO

-- ========================================
-- VERIFICATION QUERIES
-- ========================================

PRINT 'Database setup completed successfully!';
PRINT '';
PRINT 'Summary of data inserted:';
PRINT '-------------------------';
SELECT 'Roles' AS TableName, COUNT(*) AS RecordCount FROM Roles
UNION ALL
SELECT 'Staff', COUNT(*) FROM Staff
UNION ALL
SELECT 'Departments', COUNT(*) FROM Department
UNION ALL
SELECT 'Specializations', COUNT(*) FROM Specialization
UNION ALL
SELECT 'Doctors', COUNT(*) FROM Doctor
UNION ALL
SELECT 'Patients', COUNT(*) FROM Patient
UNION ALL
SELECT 'Medicines', COUNT(*) FROM Medicine
UNION ALL
SELECT 'Lab Tests', COUNT(*) FROM LabTest
UNION ALL
SELECT 'Appointments', COUNT(*) FROM Appointment;

PRINT '';
PRINT 'All tables and stored procedures created successfully!';
PRINT 'You can now use the system.';
GO

---------------


-- ========================================
-- INSERT Lab Test Prescriptions
-- ========================================

-- Prescription for Appointment 1 (Patient: Rahul Menon, Doctor: Dr. Arjun Menon)
INSERT INTO LabTestPrescription (AppointmentId, PatientId, DoctorId, TestId, TestName, Quantity, PrescribedDate, Status)
VALUES 
(1, 1, 1, 1, 'Complete Blood Count', 1, '2025-10-27 10:15', 'Pending'),
(1, 1, 1, 4, 'Blood Sugar Fasting', 1, '2025-10-27 10:15', 'Pending');

-- Prescription for Appointment 2 (Patient: Anjali Kumar, Doctor: Dr. Arjun Menon)
INSERT INTO LabTestPrescription (AppointmentId, PatientId, DoctorId, TestId, TestName, Quantity, PrescribedDate, Status)
VALUES 
(2, 2, 1, 2, 'Urinalysis', 1, '2025-10-27 10:35', 'Pending'),
(2, 2, 1, 3, 'Lipid Profile', 1, '2025-10-27 10:35', 'Pending');

-- Prescription for Appointment 3 (Patient: Vikram Das, Doctor: Dr. Arjun Menon)
INSERT INTO LabTestPrescription (AppointmentId, PatientId, DoctorId, TestId, TestName, Quantity, PrescribedDate, Status)
VALUES 
(3, 3, 1, 1, 'Complete Blood Count', 1, '2025-10-27 11:05', 'Completed'),
(3, 3, 1, 4, 'Blood Sugar Fasting', 1, '2025-10-27 11:05', 'Completed');

-- Prescription for Appointment 4 (Patient: Priya Nair, Doctor: Dr. Arjun Menon)
INSERT INTO LabTestPrescription (AppointmentId, PatientId, DoctorId, TestId, TestName, Quantity, PrescribedDate, Status)
VALUES 
(4, 4, 1, 3, 'Lipid Profile', 1, '2025-10-27 11:35', 'Pending');

GO

-- Verify the insertions
SELECT 
    ltp.PrescriptionId,
    ltp.AppointmentId,
    p.MMRNo,
    p.Name AS PatientName,
    s.Name AS DoctorName,
    ltp.TestName,
    ltp.Quantity,
    ltp.PrescribedDate,
    ltp.Status
FROM LabTestPrescription ltp
INNER JOIN Patient p ON ltp.PatientId = p.PatientId
INNER JOIN Doctor d ON ltp.DoctorId = d.DoctorId
INNER JOIN Staff s ON d.StaffId = s.StaffId
ORDER BY ltp.PrescribedDate;
